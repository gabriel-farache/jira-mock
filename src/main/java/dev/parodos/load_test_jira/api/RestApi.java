/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package dev.parodos.load_test_jira.api;

import dev.parodos.load_test_jira.model.IssueBean;
import dev.parodos.load_test_jira.model.IssueUpdateDetails;
import dev.parodos.load_test_jira.model.TransitionIssue;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import jakarta.annotation.Generated;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-07-30T10:10:58.593190739+02:00[Europe/Paris]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "Issues", description = "the Issues API")
public interface RestApi {

    default RestApiDelegate getDelegate() {
        return new RestApiDelegate() {};
    }

    /**
     * POST /rest/api/2/issue : Create issue
     * Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.  The content of the issue or subtask is defined using &#x60;update&#x60; and &#x60;fields&#x60;. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue&#39;s create screen. Note that the &#x60;description&#x60;, &#x60;environment&#x60;, and any &#x60;textarea&#x60; type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (&#x60;textfield&#x60;) accept a string and don&#39;t handle Atlassian Document Format content.  Creating a subtask differs from creating an issue as follows:   *  &#x60;issueType&#x60; must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).  *  &#x60;parent&#x60; must contain the ID or key of the parent issue.  In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.  **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
     *
     * @param issueUpdateDetails Input parameters for the action createIssue in BS (required)
     * @param updateHistory Whether the project in which the issue is created is added to the user&#39;s **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user&#39;s history for a project. These values are then used to provide defaults on the issue create screen. (optional, default to false)
     * @return Create Issue Response (status code 200)
     */
    @Operation(
        operationId = "createIssue",
        summary = "Create issue",
        description = "Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.  The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.  Creating a subtask differs from creating an issue as follows:   *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).  *  `parent` must contain the ID or key of the parent issue.  In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.  **[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Create Issue Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/2/issue",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> createIssue(
        @Parameter(name = "IssueUpdateDetails", description = "Input parameters for the action createIssue in BS", required = true) @Valid @RequestBody IssueUpdateDetails issueUpdateDetails,
        @Parameter(name = "updateHistory", description = "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateHistory", required = false, defaultValue = "false") Boolean updateHistory
    ) {
        return getDelegate().createIssue(issueUpdateDetails, updateHistory);
    }


    /**
     * GET /rest/api/2/issue/{issueIdOrKey} : Get issue
     * Returns the details for an issue.  The issue is identified by its ID or key, however, if the identifier doesn&#39;t match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param fields A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:   *  &#x60;*all&#x60; Returns all fields.  *  &#x60;*navigable&#x60; Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  Examples:   *  &#x60;summary,comment&#x60; Returns only the summary and comments fields.  *  &#x60;-description&#x60; Returns all (default) fields except description.  *  &#x60;*navigable,-comment&#x60; Returns all navigable fields except comment.  This parameter may be specified multiple times. For example, &#x60;fields&#x3D;field1,field2&amp; fields&#x3D;field3&#x60;.  Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-2-search-get) and [Search for issues using JQL (POST)](#api-rest-api-2-search-post) where the default is all navigable fields. (optional)
     * @param fieldsByKeys Whether fields in &#x60;fields&#x60; are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field&#39;s key may differ from its ID. (optional, default to false)
     * @param expand Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;renderedFields&#x60; Returns field values rendered in HTML format.  *  &#x60;names&#x60; Returns the display name of each field.  *  &#x60;schema&#x60; Returns the schema describing a field type.  *  &#x60;transitions&#x60; Returns all possible transitions for the issue.  *  &#x60;editmeta&#x60; Returns information about how each field can be edited.  *  &#x60;changelog&#x60; Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  &#x60;versionedRepresentations&#x60; Returns a JSON array for each version of a field&#39;s value, with the highest number representing the most recent version. Note: When included in the request, the &#x60;fields&#x60; parameter is ignored. (optional)
     * @param properties A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:   *  &#x60;*all&#x60; Returns all issue properties.  *  Any issue property key, prefixed with a minus to exclude.  Examples:   *  &#x60;*all&#x60; Returns all properties.  *  &#x60;*all,-prop1&#x60; Returns all properties except &#x60;prop1&#x60;.  *  &#x60;prop1,prop2&#x60; Returns &#x60;prop1&#x60; and &#x60;prop2&#x60; properties.  This parameter may be specified multiple times. For example, &#x60;properties&#x3D;prop1,prop2&amp; properties&#x3D;prop3&#x60;. (optional)
     * @param updateHistory Whether the project in which the issue is created is added to the user&#39;s **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-2-search-get) &#x60;lastViewed&#x60; field. (optional, default to false)
     * @return Returned if the request is successful. (status code 200)
     *         or Returned if the authentication credentials are incorrect or missing. (status code 401)
     *         or Returned if the issue is not found or the user does not have permission to view it. (status code 404)
     */
    @Operation(
        operationId = "getIssue",
        summary = "Get issue",
        description = "Returns the details for an issue.  The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the request is successful.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IssueBean.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the authentication credentials are incorrect or missing."),
            @ApiResponse(responseCode = "404", description = "Returned if the issue is not found or the user does not have permission to view it.")
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/2/issue/{issueIdOrKey}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IssueBean> getIssue(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "fields", description = "A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:   *  `*all` Returns all fields.  *  `*navigable` Returns navigable fields.  *  Any issue field, prefixed with a minus to exclude.  Examples:   *  `summary,comment` Returns only the summary and comments fields.  *  `-description` Returns all (default) fields except description.  *  `*navigable,-comment` Returns all navigable fields except comment.  This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.  Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-2-search-get) and [Search for issues using JQL (POST)](#api-rest-api-2-search-post) where the default is all navigable fields.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields", required = false) List<String> fields,
        @Parameter(name = "fieldsByKeys", description = "Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fieldsByKeys", required = false, defaultValue = "false") Boolean fieldsByKeys,
        @Parameter(name = "expand", description = "Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:   *  `renderedFields` Returns field values rendered in HTML format.  *  `names` Returns the display name of each field.  *  `schema` Returns the schema describing a field type.  *  `transitions` Returns all possible transitions for the issue.  *  `editmeta` Returns information about how each field can be edited.  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.  *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "expand", required = false) String expand,
        @Parameter(name = "properties", description = "A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:   *  `*all` Returns all issue properties.  *  Any issue property key, prefixed with a minus to exclude.  Examples:   *  `*all` Returns all properties.  *  `*all,-prop1` Returns all properties except `prop1`.  *  `prop1,prop2` Returns `prop1` and `prop2` properties.  This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "properties", required = false) List<String> properties,
        @Parameter(name = "updateHistory", description = "Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-2-search-get) `lastViewed` field.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "updateHistory", required = false, defaultValue = "false") Boolean updateHistory
    ) {
        return getDelegate().getIssue(issueIdOrKey, fields, fieldsByKeys, expand, properties, updateHistory);
    }


    /**
     * GET /rest/api/2/issue/{issueIdOrKey}/transitions : Get issue transitions
     * Get issue transitions
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @return Transition Issue Response (status code 200)
     */
    @Operation(
        operationId = "getIssueTransitions",
        summary = "Get issue transitions",
        description = "Get issue transitions",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Transition Issue Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/2/issue/{issueIdOrKey}/transitions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Object> getIssueTransitions(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey
    ) {
        return getDelegate().getIssueTransitions(issueIdOrKey);
    }


    /**
     * POST /rest/api/2/issue/{issueIdOrKey}/transitions : Transition issue
     * Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
     *
     * @param issueIdOrKey The ID or key of the issue. (required)
     * @param transitionIssue Input parameters for the action transitionIssue in BS (required)
     * @return Transition Issue Response (status code 200)
     */
    @Operation(
        operationId = "transitionIssue",
        summary = "Transition issue",
        description = "Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.",
        tags = { "Issues" },
        responses = {
            @ApiResponse(responseCode = "default", description = "Transition Issue Response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "basicAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/2/issue/{issueIdOrKey}/transitions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Object> transitionIssue(
        @Parameter(name = "issueIdOrKey", description = "The ID or key of the issue.", required = true, in = ParameterIn.PATH) @PathVariable("issueIdOrKey") String issueIdOrKey,
        @Parameter(name = "TransitionIssue", description = "Input parameters for the action transitionIssue in BS", required = true) @Valid @RequestBody TransitionIssue transitionIssue
    ) {
        return getDelegate().transitionIssue(issueIdOrKey, transitionIssue);
    }

}
